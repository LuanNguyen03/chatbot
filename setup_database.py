#!/usr/bin/env python3
"""
Setup script for HDBank Chatbot Database
This script creates the necessary database tables and extensions.
"""
import os
import psycopg2
from dotenv import load_dotenv

load_dotenv()

def setup_database():
    """Setup database tables and extensions"""
    try:
        # Connect to database
        conn = psycopg2.connect(os.getenv("POSTGRES_URI"))
        cur = conn.cursor()
        
        print("üîó Connected to PostgreSQL database")
        
        # Enable pgvector extension
        try:
            cur.execute("CREATE EXTENSION IF NOT EXISTS vector;")
            print("‚úÖ pgvector extension enabled")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not enable pgvector extension: {e}")
            print("   This is optional - the app will work without vector search")
        
        # Create policies table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS policies (
                id SERIAL PRIMARY KEY,
                text TEXT NOT NULL,
                filename VARCHAR(255),
                title VARCHAR(500),
                page_numbers TEXT,
                policy_type VARCHAR(100),
                effective_date VARCHAR(20),
                embedding vector(768),
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        print("‚úÖ Policies table created")
        
        # Create sessions table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS sessions (
                session_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            );
        """)
        print("‚úÖ Sessions table created")
        
        # Create chat_history table
        cur.execute("""
            CREATE TABLE IF NOT EXISTS chat_history (
                id SERIAL PRIMARY KEY,
                session_id UUID REFERENCES sessions(session_id),
                role VARCHAR(20) NOT NULL CHECK (role IN ('user', 'assistant')),
                message TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT NOW()
            );
        """)
        print("‚úÖ Chat history table created")
        
        # Create indexes
        cur.execute("CREATE INDEX IF NOT EXISTS idx_sessions_user_id ON sessions(user_id);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_chat_history_session_id ON chat_history(session_id);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_chat_history_created_at ON chat_history(created_at);")
        print("‚úÖ Indexes created")
        
        try:
            cur.execute("CREATE INDEX IF NOT EXISTS idx_policies_embedding ON policies USING ivfflat (embedding vector_cosine_ops);")
            print("‚úÖ Vector index created")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning: Could not create vector index: {e}")
        
        # Commit changes
        conn.commit()
        print("‚úÖ Database setup completed successfully!")
        
        # Insert sample data
        cur.execute("SELECT COUNT(*) FROM policies;")
        policy_count = cur.fetchone()[0]
        
        if policy_count == 0:
            print("üìù Inserting sample policy data...")
            sample_policies = [
                ("Ch√≠nh s√°ch vay ti√™u d√πng HDBank d√†nh cho kh√°ch h√†ng c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh, l√£i su·∫•t c·∫°nh tranh t·ª´ 6.99%/nƒÉm.", "vay_tieu_dung.pdf", "Vay ti√™u d√πng", "1-2"),
                ("Th·∫ª t√≠n d·ª•ng HDBank v·ªõi nhi·ªÅu ∆∞u ƒë√£i: mi·ªÖn ph√≠ th∆∞·ªùng ni√™n nƒÉm ƒë·∫ßu, ho√†n ti·ªÅn 2% cho mua s·∫Øm.", "the_tin_dung.pdf", "Th·∫ª t√≠n d·ª•ng", "1"),
                ("Vay mua nh√† HDBank v·ªõi l√£i su·∫•t ∆∞u ƒë√£i 7.5%/nƒÉm, th·ªùi h·∫°n vay l√™n ƒë·∫øn 25 nƒÉm.", "vay_mua_nha.pdf", "Vay mua nh√†", "1-3"),
                ("S·∫£n ph·∫©m ti·∫øt ki·ªám HDBank v·ªõi l√£i su·∫•t h·∫•p d·∫´n, k·ª≥ h·∫°n linh ho·∫°t t·ª´ 1-36 th√°ng.", "tiet_kiem.pdf", "Ti·∫øt ki·ªám", "1"),
                ("D·ªãch v·ª• chuy·ªÉn ti·ªÅn HDBank nhanh ch√≥ng, an to√†n v·ªõi ph√≠ chuy·ªÉn t·ª´ 3,300 VND.", "chuyen_tien.pdf", "Chuy·ªÉn ti·ªÅn", "1-2")
            ]
            
            for text, filename, title, pages in sample_policies:
                # Create dummy embedding (all zeros - will be replaced by real embeddings later)
                dummy_embedding = [0.0] * 768
                cur.execute("""
                    INSERT INTO policies (text, filename, title, page_numbers, embedding)
                    VALUES (%s, %s, %s, %s, %s)
                """, (text, filename, title, pages, dummy_embedding))
            
            conn.commit()
            print("‚úÖ Sample policy data inserted")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Database setup failed: {e}")
        print("   Please check your PostgreSQL connection and try again.")
        return False
    
    return True

if __name__ == "__main__":
    print("üöÄ Setting up HDBank Chatbot Database...")
    success = setup_database()
    
    if success:
        print("\nüéâ Database setup completed successfully!")
        print("   You can now run the chatbot application.")
    else:
        print("\n‚ùå Database setup failed!")
        print("   Please check the error messages above and try again.")